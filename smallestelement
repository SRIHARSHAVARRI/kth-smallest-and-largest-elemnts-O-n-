#include<stdio.h>
void swap(int *a,int *b)
{
	int t=*a;
	*a=*b;
	*b=t;
}
int partition(int array[],int l,int h)
{	int pivot=array[h];
	int i=l-1;
	if(l<h)
	{
		
		for(int j=l;j<=h-1;j++)
		{
		if(array[j]<=pivot)
		{
			i++;
			swap(&array[i],&array[j]);
		
		}
		}swap(&array[i+1] ,&array[h]);
	}
		
	
	return i+1;
}
int quickkthsort(int array[],int l,int h,int k)
{
	if(k>=0 && k<=h+1)
	{
		int index=partition(array,l,h);
		if(index==k-1)
		{
			return array[index];
		}
		if(index<k-1)
		{
			return quickkthsort(array,index+1,h,k);
		}
			return quickkthsort(array,l,index-1,k);
	}
	return -1;
}
void prit(int array[],int j)
{	printf("Sorted elements\n");
	int i;
	for(i=0;i<=j;i++)
	{
		printf("%d ",array[i]);
		
	}
	printf("\n");
}
int main()
{
	int array[]={32,1,12,3,6,43};
	int n=sizeof(array)/sizeof(array[0]);
	int k=2;
//	scanf("%d",&k);
	int j=quickkthsort(array,0,n-1,k);
	prit(array,n-1);
	(j!=-1)?printf("Kth smallest element in o(n) time complexity is %d\n",j):printf("Element not in array\n");
	return 0;
}
